{
  "code": "from arxiv import Client, Search, Result\nfrom datetime import datetime\nfrom typing import List, Dict, Any\n\n\ndef search_papers_paginated(query: str, max_results: int, page_size: int, from_date: datetime, to_date: datetime) ->tuple[\n    List[Result], int, List[Dict[str, Any]]]:\n    client = Client(page_size=page_size, delay_seconds=3.0)\n    date_filter = (\n        f\" AND submittedDate:[{from_date.strftime('%Y%m%d')}0000 TO {to_date.strftime('%Y%m%d')}2359]\"\n        )\n    full_query = query + date_filter\n    search = Search(query=full_query, max_results=max_results)\n    results = list(client.results(search))\n    total_results = len(results)\n    metadata_list = []\n    for paper in results:\n        metadata = {'id': paper.entry_id, 'title': paper.title, 'authors':\n            [author.name for author in paper.authors], 'summary': paper.\n            summary, 'published': paper.published, 'updated': paper.updated,\n            'categories': paper.categories, 'links': [link.href for link in\n            paper.links]}\n        metadata_list.append(metadata)\n    papers = results[:page_size]\n    return papers, total_results, metadata_list\n",
  "reasoning": "Search arXiv papers by query with date filtering, paginate the output, and return both papers and full metadata using the arxiv API client with proper rate limiting",
  "meta_prompt": {
    "task": "Search arXiv for papers matching a query and time period and return paginated results with full metadata",
    "func_name": "search_papers_paginated",
    "inputs": [
      "query",
      "max_results",
      "page_size",
      "from_date",
      "to_date"
    ],
    "outputs": [
      "papers",
      "total_results",
      "metadata_list"
    ],
    "input_types": [
      "str",
      "int",
      "int",
      "datetime",
      "datetime"
    ],
    "output_types": [
      "List[Result]",
      "int",
      "List[Dict[str,Any]]"
    ],
    "mode": "code"
  },
  "test_cases": [],
  "fitness": 0.0
}