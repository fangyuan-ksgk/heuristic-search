{
  "nodes": [
    {
      "task": "Search Google for celebrity wiki page",
      "name": "search_google",
      "inputs": [
        "query"
      ],
      "input_types": [
        "str"
      ],
      "outputs": [
        "result"
      ],
      "output_types": [
        "str"
      ],
      "target": "Obtain celebrity's wiki page URL",
      "mode": "CODE",
      "code": "\nimport http.client\nimport json\nimport os\nfrom typing import Dict, Any\n\ndef _search_google(query: str) -> Dict[str, Any]:\n    \"\"\"\n    Use Serper API to search Google for information\n    \n    Args:\n        query (str): The search query\n    \n    Returns:\n        Dict[str, Any]: Parsed JSON response from the API\n    \"\"\"\n    conn = http.client.HTTPSConnection(\"google.serper.dev\")\n    payload = json.dumps({\"q\": query})\n    headers = {\n        'X-API-KEY': os.environ[\"SERPER_API_KEY\"],\n        'Content-Type': 'application/json'\n    }\n    \n    try:\n        conn.request(\"POST\", \"/search\", payload, headers)\n        res = conn.getresponse()\n        data = res.read()\n        return json.loads(data.decode(\"utf-8\"))\n    except Exception as e:\n        print(f\"Error occurred during API request: {str(e)}\")\n        return {}\n    finally:\n        conn.close()\n        \ndef search_google(query: str) -> str: \n    \"\"\" \n    Input query, return search result string from Google\n    \"\"\"\n    result = _search_google(query)\n    result_dict = {k.replace(\"organic\", \"Search Result\"): v for k, v in result.items() if k in [\"answerBox\", \"organic\"]}\n    result_str = json.dumps(result_dict, indent=2)\n    return result_str \n",
      "reasoning": "Search google for top search results",
      "fitness": 1.0
    },
    {
      "task": "Extract birthdate from wiki page",
      "name": "extract_birthdate",
      "inputs": [
        "html"
      ],
      "input_types": [
        "str"
      ],
      "outputs": [
        "birthdate"
      ],
      "output_types": [
        "str"
      ],
      "target": "Extract celebrity's birthdate",
      "mode": "CODE"
    },
    {
      "task": "Calculate age",
      "name": "calculate_age",
      "inputs": [
        "birthdate"
      ],
      "input_types": [
        "str"
      ],
      "outputs": [
        "age"
      ],
      "output_types": [
        "int"
      ],
      "target": "Calculate celebrity's age",
      "mode": "CODE"
    },
    {
      "task": "Get celebrity's age",
      "name": "get_celeb_age",
      "inputs": [
        "name"
      ],
      "input_types": [
        "str"
      ],
      "outputs": [
        "age"
      ],
      "output_types": [
        "int"
      ],
      "target": "Obtain celebrity's age",
      "mode": "CODE"
    }
  ],
  "edges": [
    {
      "source": "search_google",
      "target": "extract_birthdate"
    },
    {
      "source": "extract_birthdate",
      "target": "calculate_age"
    },
    {
      "source": "calculate_age",
      "target": "get_celeb_age"
    }
  ]
}